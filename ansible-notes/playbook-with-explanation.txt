```yaml
- name: Deploy a web application
  hosts: web_servers
  become: yes
  vars:
    app_name: myapp
    app_version: 1.2.3
    app_repo: https://example.com/myapp.git
  tasks:
    - name: Install required packages
      apt:
        name:
          - git
          - python3
          - python3-pip
        state: present
      tags:
        - install
      register: package_install_result
      post_tasks:
        - name: Log package installation result
          debug:
            msg: "Package installation result: {{ package_install_result }}"

    - name: Clone application repository
      git:
        repo: "{{ app_repo }}"
        dest: /opt/{{ app_name }}
        version: "{{ app_version }}"
      tags:
        - clone
      register: git_clone_result
      post_tasks:
        - name: Log git clone result
          debug:
            msg: "Git clone result: {{ git_clone_result }}"

    - name: Install application dependencies
      pip:
        requirements: /opt/{{ app_name }}/requirements.txt
        state: present
      tags:
        - install
      register: pip_install_result
      post_tasks:
        - name: Log pip installation result
          debug:
            msg: "Pip installation result: {{ pip_install_result }}"

    - name: Build application
      command: python3 /opt/{{ app_name }}/setup.py build
      register: build_output
      tags:
        - build
      post_tasks:
        - name: Log build output
          debug:
            msg: "Build output: {{ build_output }}"

    - name: Install application
      command: python3 /opt/{{ app_name }}/setup.py install
      when: build_output.rc == 0
      tags:
        - install
      post_tasks:
        - name: Log application installation
          debug:
            msg: "Application installed successfully"

    - name: Start application
      systemd:
        name: "{{ app_name }}"
        state: started
        enabled: yes
        daemon_reload: yes
      notify:
        - restart application
      tags:
        - start
      post_tasks:
        - name: Log application start
          debug:
            msg: "Application started successfully"

  handlers:
    - name: restart application
      systemd:
        name: "{{ app_name }}"
        state: restarted
      post_tasks:
        - name: Log application restart
          debug:
            msg: "Application restarted successfully"
```

Explanation of the keys used in this task:

1. **name**: Describes the purpose of the play.
2. **hosts**: Specifies the target hosts for the tasks.
3. **become**: Enables privilege escalation for the tasks.
4. **vars**: Defines variables for use in the play.
5. **tasks**: Contains the list of tasks to be executed.
6. **apt**: Installs required packages using the apt module.
7. **tags**: Assigns tags to tasks for selective execution.
8. **register**: Stores the output of a task in a variable.
9. **post_tasks**: Contains tasks to be executed after each main task.
10. **debug**: Logs information during playbook execution.
11. **git**: Clones the application repository using the git module.
12. **pip**: Installs Python dependencies using the pip module.
13. **command**: Executes custom commands.
14. **when**: Conditionally executes a task based on a condition.
15. **systemd**: Manages system services using the systemd module.
16. **notify**: Triggers a handler when the task makes changes.
17. **handlers**: Contains tasks that respond to notifications.

